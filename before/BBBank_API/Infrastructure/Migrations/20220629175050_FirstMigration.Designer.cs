// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BBBankContext))]
    [Migration("20220629175050_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            AccountNumber = "0001-1001",
                            AccountStatus = 1,
                            AccountTitle = "Raas Masood",
                            CurrentBalance = 3500m,
                            UserId = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3"
                        });
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = "86162ae8-2474-4191-93b4-ebffd274361d",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 3000m,
                            TransactionDate = new DateTime(2022, 6, 28, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1269),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "8d73f4eb-9376-43cf-b9c2-0ec8cc995310",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2021, 6, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1306),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "4499291f-8723-4bc9-8b8c-2275aa22e4a8",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2020, 6, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1310),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "67371025-7de6-406a-9929-e24cdc304082",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2022, 3, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1349),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "669d0a57-f8bf-4625-b762-10008d7c491e",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -200m,
                            TransactionDate = new DateTime(2022, 2, 28, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1352),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "a08ec8aa-3faf-46dd-9e5e-3d90effcf415",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2022, 1, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1355),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "7ae4b617-14fe-4afa-89e3-69e92239a55e",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2021, 12, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1361),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "45e07350-eac2-43eb-9212-92e3ee6d6535",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -300m,
                            TransactionDate = new DateTime(2021, 11, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1364),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "7de5b896-7276-4fa7-b9a8-57b7b5ace775",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -100m,
                            TransactionDate = new DateTime(2021, 10, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1366),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "0c9ba805-a546-487f-87d0-4bce06628292",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2021, 9, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1371),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "3022256e-1a91-432b-aae6-4d68259ec98c",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2021, 8, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1374),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "75f8377d-8493-4063-94d7-bced031b3b9f",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 900m,
                            TransactionDate = new DateTime(2021, 7, 29, 22, 50, 50, 551, DateTimeKind.Local).AddTicks(1376),
                            TransactionType = 0
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3",
                            Email = "rassmasood@hotmail.com",
                            FirstName = "Raas",
                            LastName = "Masood",
                            ProfilePicUrl = "https://res.cloudinary.com/demo/image/upload/w_400,h_400,c_crop,g_face,r_max/w_200/lady.jpg"
                        });
                });

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Transaction", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
